
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/60_search/example_successive_halving.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_60_search_example_successive_halving.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_60_search_example_successive_halving.py:


==================
Successive Halving
==================

This advanced  example illustrates how to interact with
the SMAC callback and get relevant information from the run, like
the number of iterations. Particularly, it exemplifies how to select
the intensification strategy to use in smac, in this case:
`SuccessiveHalving <http://proceedings.mlr.press/v80/falkner18a/falkner18a-supp.pdf>`_.

This results in an adaptation of the `BOHB algorithm <http://proceedings.mlr.press/v80/falkner18a/falkner18a.pdf>`_.
It uses Successive Halving instead of `Hyperband <https://jmlr.org/papers/volume18/16-558/16-558.pdf>`_, and could be abbreviated as BOSH.
To get the BOHB algorithm, simply import Hyperband and use it as the intensification strategy.

.. GENERATED FROM PYTHON SOURCE LINES 17-26

.. code-block:: default

    from pprint import pprint

    import sklearn.model_selection
    import sklearn.datasets
    import sklearn.metrics

    import autosklearn.classification









.. GENERATED FROM PYTHON SOURCE LINES 27-29

Define a callback that instantiates SuccessiveHalving
=====================================================

.. GENERATED FROM PYTHON SOURCE LINES 29-80

.. code-block:: default


    def get_smac_object_callback(budget_type):
        def get_smac_object(
            scenario_dict,
            seed,
            ta,
            ta_kwargs,
            metalearning_configurations,
            n_jobs,
            dask_client,
        ):
            from smac.facade.smac_ac_facade import SMAC4AC
            from smac.intensification.successive_halving import SuccessiveHalving
            from smac.runhistory.runhistory2epm import RunHistory2EPM4LogCost
            from smac.scenario.scenario import Scenario

            if n_jobs > 1 or (dask_client and len(dask_client.nthreads()) > 1):
                raise ValueError("Please make sure to guard the code invoking Auto-sklearn by "
                                 "`if __name__ == '__main__'` and remove this exception.")

            scenario = Scenario(scenario_dict)
            if len(metalearning_configurations) > 0:
                default_config = scenario.cs.get_default_configuration()
                initial_configurations = [default_config] + metalearning_configurations
            else:
                initial_configurations = None
            rh2EPM = RunHistory2EPM4LogCost

            ta_kwargs['budget_type'] = budget_type

            return SMAC4AC(
                scenario=scenario,
                rng=seed,
                runhistory2epm=rh2EPM,
                tae_runner=ta,
                tae_runner_kwargs=ta_kwargs,
                initial_configurations=initial_configurations,
                run_id=seed,
                intensifier=SuccessiveHalving,
                intensifier_kwargs={
                    'initial_budget': 10.0,
                    'max_budget': 100,
                    'eta': 2,
                    'min_chall': 1
                },
                n_jobs=n_jobs,
                dask_client=dask_client,
            )
        return get_smac_object









.. GENERATED FROM PYTHON SOURCE LINES 81-83

Data Loading
============

.. GENERATED FROM PYTHON SOURCE LINES 83-88

.. code-block:: default


    X, y = sklearn.datasets.load_breast_cancer(return_X_y=True)
    X_train, X_test, y_train, y_test = \
        sklearn.model_selection.train_test_split(X, y, random_state=1, shuffle=True)








.. GENERATED FROM PYTHON SOURCE LINES 89-91

Build and fit a classifier
==========================

.. GENERATED FROM PYTHON SOURCE LINES 91-120

.. code-block:: default


    automl = autosklearn.classification.AutoSklearnClassifier(
        time_left_for_this_task=40,
        per_run_time_limit=10,
        tmp_folder='/tmp/autosklearn_sh_example_tmp',
        disable_evaluator_output=False,
        # 'holdout' with 'train_size'=0.67 is the default argument setting
        # for AutoSklearnClassifier. It is explicitly specified in this example
        # for demonstrational purpose.
        resampling_strategy='holdout',
        resampling_strategy_arguments={'train_size': 0.67},
        include={
            'classifier': [
                'extra_trees', 'gradient_boosting', 'random_forest',
                'sgd', 'passive_aggressive'
            ],
            'feature_preprocessor': ['no_preprocessing']
        },
        get_smac_object_callback=get_smac_object_callback('iterations'),
    )
    automl.fit(X_train, y_train, dataset_name='breast_cancer')

    pprint(automl.show_models(), indent=4)
    predictions = automl.predict(X_test)
    # Print statistics about the auto-sklearn run such as number of
    # iterations, number of models failed with a time out.
    print(automl.sprint_statistics())
    print("Accuracy score", sklearn.metrics.accuracy_score(y_test, predictions))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/runner/work/auto-sklearn/auto-sklearn/autosklearn/metalearning/metalearning/meta_base.py:68: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
      self.metafeatures = self.metafeatures.append(metafeatures)
    /home/runner/work/auto-sklearn/auto-sklearn/autosklearn/metalearning/metalearning/meta_base.py:72: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
      self.algorithm_runs[metric].append(runs)
    /opt/hostedtoolcache/Python/3.8.12/x64/lib/python3.8/site-packages/smac/intensification/parallel_scheduling.py:153: UserWarning: SuccessiveHalving is executed with 1 workers only. Consider to use pynisher to use all available workers.
      warnings.warn(
    {   2: {   'balancing': Balancing(random_state=1),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb93b0d68b0>,
               'cost': 0.021276595744680882,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb937d5ff10>,
               'ensemble_weight': 0.02,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb93b0d6700>,
               'model_id': 2,
               'rank': 4,
               'sklearn_classifier': RandomForestClassifier(max_features=5, n_estimators=64, n_jobs=1,
                           random_state=1, warm_start=True)},
        3: {   'balancing': Balancing(random_state=1),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb93eb45cd0>,
               'cost': 0.028368794326241176,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb9380f5d60>,
               'ensemble_weight': 0.04,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb93736c8b0>,
               'model_id': 3,
               'rank': 7,
               'sklearn_classifier': RandomForestClassifier(criterion='entropy', max_features=23, min_samples_leaf=7,
                           n_estimators=64, n_jobs=1, random_state=1,
                           warm_start=True)},
        4: {   'balancing': Balancing(random_state=1),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb93b2f4ee0>,
               'cost': 0.07801418439716312,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb9381daca0>,
               'ensemble_weight': 0.1,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb93b2f4dc0>,
               'model_id': 4,
               'rank': 17,
               'sklearn_classifier': PassiveAggressiveClassifier(C=0.14268277711454813, max_iter=128, random_state=1,
                                tol=0.0002600768160857831, warm_start=True)},
        5: {   'balancing': Balancing(random_state=1),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb93d5d2130>,
               'cost': 0.028368794326241176,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb93abc7df0>,
               'ensemble_weight': 0.12,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb93b0dc2e0>,
               'model_id': 5,
               'rank': 8,
               'sklearn_classifier': HistGradientBoostingClassifier(early_stopping=False, l2_regularization=1e-10,
                                   learning_rate=0.16262682406125173, max_iter=64,
                                   max_leaf_nodes=66, n_iter_no_change=0,
                                   random_state=1, validation_fraction=None,
                                   warm_start=True)},
        6: {   'balancing': Balancing(random_state=1),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb937facac0>,
               'cost': 0.028368794326241176,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb93efd6be0>,
               'ensemble_weight': 0.06,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb936d111f0>,
               'model_id': 6,
               'rank': 9,
               'sklearn_classifier': HistGradientBoostingClassifier(early_stopping=True,
                                   l2_regularization=3.609412172481434e-10,
                                   learning_rate=0.05972079854295879, max_iter=64,
                                   max_leaf_nodes=4, min_samples_leaf=2,
                                   n_iter_no_change=14, random_state=1,
                                   validation_fraction=None, warm_start=True)},
        7: {   'balancing': Balancing(random_state=1),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb937a9af70>,
               'cost': 0.03546099290780147,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb93d3d5ac0>,
               'ensemble_weight': 0.08,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb937a9a790>,
               'model_id': 7,
               'rank': 12,
               'sklearn_classifier': SGDClassifier(alpha=0.0002346515712987664, average=True, eta0=0.01, loss='log',
                  max_iter=128, penalty='l1', random_state=1,
                  tol=1.3716748930467322e-05, warm_start=True)},
        8: {   'balancing': Balancing(random_state=1, strategy='weighting'),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb93b807f40>,
               'cost': 0.014184397163120588,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb93b1be700>,
               'ensemble_weight': 0.12,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb93b8074c0>,
               'model_id': 8,
               'rank': 1,
               'sklearn_classifier': RandomForestClassifier(bootstrap=False, criterion='entropy', max_features=4,
                           min_samples_split=4, n_estimators=64, n_jobs=1,
                           random_state=1, warm_start=True)},
        9: {   'balancing': Balancing(random_state=1),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb93b05eaf0>,
               'cost': 0.021276595744680882,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb93eaaad90>,
               'ensemble_weight': 0.04,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb93b05e880>,
               'model_id': 9,
               'rank': 6,
               'sklearn_classifier': ExtraTreesClassifier(criterion='entropy', max_features=8, min_samples_split=3,
                         n_estimators=512, n_jobs=1, random_state=1,
                         warm_start=True)},
        10: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb93f36e5b0>,
                'cost': 0.028368794326241176,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb93ba61a30>,
                'ensemble_weight': 0.02,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb93f36ec10>,
                'model_id': 10,
                'rank': 10,
                'sklearn_classifier': HistGradientBoostingClassifier(early_stopping=True,
                                   l2_regularization=5.027708640006448e-08,
                                   learning_rate=0.09750328007832798, max_iter=64,
                                   max_leaf_nodes=1234, min_samples_leaf=25,
                                   n_iter_no_change=1, random_state=1,
                                   validation_fraction=0.08300813783286698,
                                   warm_start=True)},
        11: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb93aafaf40>,
                'cost': 0.028368794326241176,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb93d5e08e0>,
                'ensemble_weight': 0.06,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb93aafad60>,
                'model_id': 11,
                'rank': 11,
                'sklearn_classifier': HistGradientBoostingClassifier(early_stopping=False,
                                   l2_regularization=1.0945814167023392e-10,
                                   learning_rate=0.11042628136263043, max_iter=128,
                                   max_leaf_nodes=30, min_samples_leaf=22,
                                   n_iter_no_change=0, random_state=1,
                                   validation_fraction=None, warm_start=True)},
        13: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb9378c94c0>,
                'cost': 0.03546099290780147,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb93d56b340>,
                'ensemble_weight': 0.08,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb9378c9550>,
                'model_id': 13,
                'rank': 13,
                'sklearn_classifier': HistGradientBoostingClassifier(early_stopping=True,
                                   l2_regularization=2.506856350040198e-06,
                                   learning_rate=0.04634380160611007, max_iter=64,
                                   max_leaf_nodes=11, min_samples_leaf=41,
                                   n_iter_no_change=17, random_state=1,
                                   validation_fraction=None, warm_start=True)},
        14: {   'balancing': Balancing(random_state=1),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb9381d2070>,
                'cost': 0.03546099290780147,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb93a958e20>,
                'ensemble_weight': 0.06,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb9381d2e80>,
                'model_id': 14,
                'rank': 14,
                'sklearn_classifier': ExtraTreesClassifier(bootstrap=True, max_features=3, min_samples_leaf=2,
                         min_samples_split=3, n_estimators=64, n_jobs=1,
                         random_state=1, warm_start=True)},
        15: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb9379ffbb0>,
                'cost': 0.049645390070921946,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb93b1300a0>,
                'ensemble_weight': 0.02,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb93ea822e0>,
                'model_id': 15,
                'rank': 15,
                'sklearn_classifier': HistGradientBoostingClassifier(early_stopping=False,
                                   l2_regularization=0.0005657707133726288,
                                   learning_rate=0.09546265146045475, max_iter=64,
                                   max_leaf_nodes=109, min_samples_leaf=2,
                                   n_iter_no_change=0, random_state=1,
                                   validation_fraction=None, warm_start=True)},
        16: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb9371e0910>,
                'cost': 0.049645390070921946,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb93f03f610>,
                'ensemble_weight': 0.04,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb9371e0fd0>,
                'model_id': 16,
                'rank': 16,
                'sklearn_classifier': RandomForestClassifier(bootstrap=False, criterion='entropy', max_features=12,
                           min_samples_leaf=15, min_samples_split=6,
                           n_estimators=64, n_jobs=1, random_state=1,
                           warm_start=True)},
        17: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb9381bb220>,
                'cost': 0.099290780141844,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb9362a41c0>,
                'ensemble_weight': 0.04,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb93d426160>,
                'model_id': 17,
                'rank': 18,
                'sklearn_classifier': SGDClassifier(alpha=9.410144741041167e-05, average=True,
                  eta0=0.0018055343233337954, learning_rate='constant', loss='log',
                  max_iter=128, penalty='l1', random_state=1,
                  tol=0.05082904256838701, warm_start=True)}}
    auto-sklearn results:
      Dataset name: breast_cancer
      Metric: accuracy
      Best validation score: 0.985816
      Number of target algorithm runs: 21
      Number of successful target algorithm runs: 20
      Number of crashed target algorithm runs: 0
      Number of target algorithms that exceeded the time limit: 1
      Number of target algorithms that exceeded the memory limit: 0

    Accuracy score 0.951048951048951




.. GENERATED FROM PYTHON SOURCE LINES 121-123

We can also use cross-validation with successive halving
========================================================

.. GENERATED FROM PYTHON SOURCE LINES 123-154

.. code-block:: default


    X, y = sklearn.datasets.load_breast_cancer(return_X_y=True)
    X_train, X_test, y_train, y_test = \
        sklearn.model_selection.train_test_split(X, y, random_state=1, shuffle=True)

    automl = autosklearn.classification.AutoSklearnClassifier(
        time_left_for_this_task=40,
        per_run_time_limit=10,
        tmp_folder='/tmp/autosklearn_sh_example_tmp_01',
        disable_evaluator_output=False,
        resampling_strategy='cv',
        include={
            'classifier': [
                'extra_trees', 'gradient_boosting', 'random_forest', 
                'sgd', 'passive_aggressive'
            ],
            'feature_preprocessor': ['no_preprocessing']
        },
        get_smac_object_callback=get_smac_object_callback('iterations'),
    )
    automl.fit(X_train, y_train, dataset_name='breast_cancer')

    # Print the final ensemble constructed by auto-sklearn.
    pprint(automl.show_models(), indent=4)
    automl.refit(X_train, y_train)
    predictions = automl.predict(X_test)
    # Print statistics about the auto-sklearn run such as number of
    # iterations, number of models failed with a time out.
    print(automl.sprint_statistics())
    print("Accuracy score", sklearn.metrics.accuracy_score(y_test, predictions))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/runner/work/auto-sklearn/auto-sklearn/autosklearn/metalearning/metalearning/meta_base.py:68: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
      self.metafeatures = self.metafeatures.append(metafeatures)
    /home/runner/work/auto-sklearn/auto-sklearn/autosklearn/metalearning/metalearning/meta_base.py:72: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
      self.algorithm_runs[metric].append(runs)
    /opt/hostedtoolcache/Python/3.8.12/x64/lib/python3.8/site-packages/smac/intensification/parallel_scheduling.py:153: UserWarning: SuccessiveHalving is executed with 1 workers only. Consider to use pynisher to use all available workers.
      warnings.warn(
    {   2: {   'cost': 0.046948356807511755,
               'ensemble_weight': 0.16,
               'estimators': [   {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb9379d6eb0>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb93736c8b0>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb9379d6550>,
                                     'sklearn_classifier': RandomForestClassifier(max_features=5, n_estimators=64, n_jobs=1,
                           random_state=1, warm_start=True)},
                                 {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb93eb8c340>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb93baef100>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb93eb8c0a0>,
                                     'sklearn_classifier': RandomForestClassifier(max_features=5, n_estimators=64, n_jobs=1,
                           random_state=1, warm_start=True)},
                                 {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb93d42fa00>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb938067a60>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb93ae1a100>,
                                     'sklearn_classifier': RandomForestClassifier(max_features=5, n_estimators=64, n_jobs=1,
                           random_state=1, warm_start=True)},
                                 {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb93aff1ac0>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb93742ba90>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb93aff16d0>,
                                     'sklearn_classifier': RandomForestClassifier(max_features=5, n_estimators=64, n_jobs=1,
                           random_state=1, warm_start=True)},
                                 {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb93a491520>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb93a9dbaf0>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb93a491460>,
                                     'sklearn_classifier': RandomForestClassifier(max_features=5, n_estimators=64, n_jobs=1,
                           random_state=1, warm_start=True)}],
               'model_id': 2,
               'rank': 6,
               'voting_model': VotingClassifier(estimators=None, voting='soft')},
        3: {   'cost': 0.05164319248826292,
               'ensemble_weight': 0.06,
               'estimators': [   {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb9360147f0>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb937e6bca0>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb93a755850>,
                                     'sklearn_classifier': RandomForestClassifier(criterion='entropy', max_features=23, min_samples_leaf=7,
                           n_estimators=64, n_jobs=1, random_state=1,
                           warm_start=True)},
                                 {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb93b7454f0>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb93b2a2460>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb93b7453d0>,
                                     'sklearn_classifier': RandomForestClassifier(criterion='entropy', max_features=23, min_samples_leaf=7,
                           n_estimators=64, n_jobs=1, random_state=1,
                           warm_start=True)},
                                 {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb9372553a0>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb93b4eb970>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb9372552e0>,
                                     'sklearn_classifier': RandomForestClassifier(criterion='entropy', max_features=23, min_samples_leaf=7,
                           n_estimators=64, n_jobs=1, random_state=1,
                           warm_start=True)},
                                 {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb937369070>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb93d2c7640>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb93d2cdf70>,
                                     'sklearn_classifier': RandomForestClassifier(criterion='entropy', max_features=23, min_samples_leaf=7,
                           n_estimators=64, n_jobs=1, random_state=1,
                           warm_start=True)},
                                 {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb93a844d00>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb937bf1310>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb93a844c40>,
                                     'sklearn_classifier': RandomForestClassifier(criterion='entropy', max_features=23, min_samples_leaf=7,
                           n_estimators=64, n_jobs=1, random_state=1,
                           warm_start=True)}],
               'model_id': 3,
               'rank': 8,
               'voting_model': VotingClassifier(estimators=None, voting='soft')},
        4: {   'cost': 0.08215962441314555,
               'ensemble_weight': 0.24,
               'estimators': [   {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb93b10a460>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb93b4b2d90>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb938067fd0>,
                                     'sklearn_classifier': PassiveAggressiveClassifier(C=0.14268277711454813, max_iter=128, random_state=1,
                                tol=0.0002600768160857831, warm_start=True)},
                                 {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb937269d90>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb9374fc460>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb937269b50>,
                                     'sklearn_classifier': PassiveAggressiveClassifier(C=0.14268277711454813, max_iter=128, random_state=1,
                                tol=0.0002600768160857831, warm_start=True)},
                                 {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb936341940>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb93d2cdca0>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb936341820>,
                                     'sklearn_classifier': PassiveAggressiveClassifier(C=0.14268277711454813, max_iter=128, random_state=1,
                                tol=0.0002600768160857831, warm_start=True)},
                                 {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb935fc3460>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb93d5f6a90>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb935fc3160>,
                                     'sklearn_classifier': PassiveAggressiveClassifier(C=0.14268277711454813, max_iter=128, random_state=1,
                                tol=0.0002600768160857831, warm_start=True)},
                                 {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb93647f7f0>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb937f02e50>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb93647f730>,
                                     'sklearn_classifier': PassiveAggressiveClassifier(C=0.14268277711454813, max_iter=128, random_state=1,
                                tol=0.0002600768160857831, warm_start=True)}],
               'model_id': 4,
               'rank': 9,
               'voting_model': VotingClassifier(estimators=None, voting='soft')},
        5: {   'cost': 0.035211267605633804,
               'ensemble_weight': 0.02,
               'estimators': [   {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb936d119a0>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb93d372400>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb936d11d00>,
                                     'sklearn_classifier': HistGradientBoostingClassifier(early_stopping=False, l2_regularization=1e-10,
                                   learning_rate=0.16262682406125173, max_iter=64,
                                   max_leaf_nodes=66, n_iter_no_change=0,
                                   random_state=1, validation_fraction=None,
                                   warm_start=True)},
                                 {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb93809c790>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb93aa3d4c0>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb93809c8e0>,
                                     'sklearn_classifier': HistGradientBoostingClassifier(early_stopping=False, l2_regularization=1e-10,
                                   learning_rate=0.16262682406125173, max_iter=64,
                                   max_leaf_nodes=66, n_iter_no_change=0,
                                   random_state=1, validation_fraction=None,
                                   warm_start=True)},
                                 {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb937d5f400>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb93ac09820>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb937d5fc70>,
                                     'sklearn_classifier': HistGradientBoostingClassifier(early_stopping=False, l2_regularization=1e-10,
                                   learning_rate=0.16262682406125173, max_iter=64,
                                   max_leaf_nodes=66, n_iter_no_change=0,
                                   random_state=1, validation_fraction=None,
                                   warm_start=True)},
                                 {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb93ebfd7f0>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb9371d9760>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb93ebfde80>,
                                     'sklearn_classifier': HistGradientBoostingClassifier(early_stopping=False, l2_regularization=1e-10,
                                   learning_rate=0.16262682406125173, max_iter=64,
                                   max_leaf_nodes=66, n_iter_no_change=0,
                                   random_state=1, validation_fraction=None,
                                   warm_start=True)},
                                 {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb935fd89d0>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb935fc2190>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb935fd8640>,
                                     'sklearn_classifier': HistGradientBoostingClassifier(early_stopping=False, l2_regularization=1e-10,
                                   learning_rate=0.16262682406125173, max_iter=64,
                                   max_leaf_nodes=66, n_iter_no_change=0,
                                   random_state=1, validation_fraction=None,
                                   warm_start=True)}],
               'model_id': 5,
               'rank': 3,
               'voting_model': VotingClassifier(estimators=None, voting='soft')},
        6: {   'cost': 0.04694835680751174,
               'ensemble_weight': 0.02,
               'estimators': [   {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb936a1e3d0>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb9381ba730>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb936a1e400>,
                                     'sklearn_classifier': HistGradientBoostingClassifier(early_stopping=True,
                                   l2_regularization=3.609412172481434e-10,
                                   learning_rate=0.05972079854295879, max_iter=64,
                                   max_leaf_nodes=4, min_samples_leaf=2,
                                   n_iter_no_change=14, random_state=1,
                                   validation_fraction=None, warm_start=True)},
                                 {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb93754caf0>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb93ae1a520>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb93754cdf0>,
                                     'sklearn_classifier': HistGradientBoostingClassifier(early_stopping=True,
                                   l2_regularization=3.609412172481434e-10,
                                   learning_rate=0.05972079854295879, max_iter=64,
                                   max_leaf_nodes=4, min_samples_leaf=2,
                                   n_iter_no_change=14, random_state=1,
                                   validation_fraction=None, warm_start=True)},
                                 {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb93ae22850>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb93a9db910>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb93ae22730>,
                                     'sklearn_classifier': HistGradientBoostingClassifier(early_stopping=True,
                                   l2_regularization=3.609412172481434e-10,
                                   learning_rate=0.05972079854295879, max_iter=64,
                                   max_leaf_nodes=4, min_samples_leaf=2,
                                   n_iter_no_change=14, random_state=1,
                                   validation_fraction=None, warm_start=True)},
                                 {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb93bba9790>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb93b29cd90>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb93bba96d0>,
                                     'sklearn_classifier': HistGradientBoostingClassifier(early_stopping=True,
                                   l2_regularization=3.609412172481434e-10,
                                   learning_rate=0.05972079854295879, max_iter=64,
                                   max_leaf_nodes=4, min_samples_leaf=2,
                                   n_iter_no_change=14, random_state=1,
                                   validation_fraction=None, warm_start=True)},
                                 {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb93a9724f0>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb9370b4af0>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb93a972430>,
                                     'sklearn_classifier': HistGradientBoostingClassifier(early_stopping=True,
                                   l2_regularization=3.609412172481434e-10,
                                   learning_rate=0.05972079854295879, max_iter=64,
                                   max_leaf_nodes=4, min_samples_leaf=2,
                                   n_iter_no_change=14, random_state=1,
                                   validation_fraction=None, warm_start=True)}],
               'model_id': 6,
               'rank': 7,
               'voting_model': VotingClassifier(estimators=None, voting='soft')},
        7: {   'cost': 0.035211267605633784,
               'ensemble_weight': 0.12,
               'estimators': [   {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb93b3c0f10>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb93637d460>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb93b3c01f0>,
                                     'sklearn_classifier': SGDClassifier(alpha=0.0002346515712987664, average=True, eta0=0.01, loss='log',
                  max_iter=128, penalty='l1', random_state=1,
                  tol=1.3716748930467322e-05, warm_start=True)},
                                 {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb93b018370>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb935fc2910>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb93b018190>,
                                     'sklearn_classifier': SGDClassifier(alpha=0.0002346515712987664, average=True, eta0=0.01, loss='log',
                  max_iter=128, penalty='l1', random_state=1,
                  tol=1.3716748930467322e-05, warm_start=True)},
                                 {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb936a1efa0>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb93aa25130>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb936a1e0a0>,
                                     'sklearn_classifier': SGDClassifier(alpha=0.0002346515712987664, average=True, eta0=0.01, loss='log',
                  max_iter=128, penalty='l1', random_state=1,
                  tol=1.3716748930467322e-05, warm_start=True)},
                                 {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb93b136160>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb93ac1c9d0>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb93b136730>,
                                     'sklearn_classifier': SGDClassifier(alpha=0.0002346515712987664, average=True, eta0=0.01, loss='log',
                  max_iter=128, penalty='l1', random_state=1,
                  tol=1.3716748930467322e-05, warm_start=True)},
                                 {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb937f6cfd0>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb93bb26340>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb937f6c580>,
                                     'sklearn_classifier': SGDClassifier(alpha=0.0002346515712987664, average=True, eta0=0.01, loss='log',
                  max_iter=128, penalty='l1', random_state=1,
                  tol=1.3716748930467322e-05, warm_start=True)}],
               'model_id': 7,
               'rank': 4,
               'voting_model': VotingClassifier(estimators=None, voting='soft')},
        8: {   'cost': 0.039906103286385,
               'ensemble_weight': 0.04,
               'estimators': [   {   'balancing': Balancing(random_state=1, strategy='weighting'),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb93ead2520>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb9371e01c0>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb93ead2e20>,
                                     'sklearn_classifier': RandomForestClassifier(bootstrap=False, criterion='entropy', max_features=4,
                           min_samples_split=4, n_estimators=64, n_jobs=1,
                           random_state=1, warm_start=True)},
                                 {   'balancing': Balancing(random_state=1, strategy='weighting'),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb93aaa69d0>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb93633b040>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb93aaa6a00>,
                                     'sklearn_classifier': RandomForestClassifier(bootstrap=False, criterion='entropy', max_features=4,
                           min_samples_split=4, n_estimators=64, n_jobs=1,
                           random_state=1, warm_start=True)},
                                 {   'balancing': Balancing(random_state=1, strategy='weighting'),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb9377d7a60>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb9377e6460>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb9377d7130>,
                                     'sklearn_classifier': RandomForestClassifier(bootstrap=False, criterion='entropy', max_features=4,
                           min_samples_split=4, n_estimators=64, n_jobs=1,
                           random_state=1, warm_start=True)},
                                 {   'balancing': Balancing(random_state=1, strategy='weighting'),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb937595310>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb93b5327c0>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb937595100>,
                                     'sklearn_classifier': RandomForestClassifier(bootstrap=False, criterion='entropy', max_features=4,
                           min_samples_split=4, n_estimators=64, n_jobs=1,
                           random_state=1, warm_start=True)},
                                 {   'balancing': Balancing(random_state=1, strategy='weighting'),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb936d9f2b0>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb938067160>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb936d9f310>,
                                     'sklearn_classifier': RandomForestClassifier(bootstrap=False, criterion='entropy', max_features=4,
                           min_samples_split=4, n_estimators=64, n_jobs=1,
                           random_state=1, warm_start=True)}],
               'model_id': 8,
               'rank': 5,
               'voting_model': VotingClassifier(estimators=None, voting='soft')},
        9: {   'cost': 0.030516431924882622,
               'ensemble_weight': 0.2,
               'estimators': [   {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb93a7d1340>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb9381661f0>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb93a7d13d0>,
                                     'sklearn_classifier': ExtraTreesClassifier(criterion='entropy', max_features=8, min_samples_split=3,
                         n_estimators=128, n_jobs=1, random_state=1,
                         warm_start=True)},
                                 {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb937162640>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb93eb1a400>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb937162e80>,
                                     'sklearn_classifier': ExtraTreesClassifier(criterion='entropy', max_features=8, min_samples_split=3,
                         n_estimators=128, n_jobs=1, random_state=1,
                         warm_start=True)},
                                 {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb93d54bb80>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb93a5f3d30>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb93d54bac0>,
                                     'sklearn_classifier': ExtraTreesClassifier(criterion='entropy', max_features=8, min_samples_split=3,
                         n_estimators=128, n_jobs=1, random_state=1,
                         warm_start=True)},
                                 {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb93ac09760>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb93b0c7c70>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb93ea94220>,
                                     'sklearn_classifier': ExtraTreesClassifier(criterion='entropy', max_features=8, min_samples_split=3,
                         n_estimators=128, n_jobs=1, random_state=1,
                         warm_start=True)},
                                 {   'balancing': Balancing(random_state=1),
                                     'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb93b0d6640>,
                                     'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb937431760>,
                                     'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb93b0d6520>,
                                     'sklearn_classifier': ExtraTreesClassifier(criterion='entropy', max_features=8, min_samples_split=3,
                         n_estimators=128, n_jobs=1, random_state=1,
                         warm_start=True)}],
               'model_id': 9,
               'rank': 2,
               'voting_model': VotingClassifier(estimators=None, voting='soft')}}
    auto-sklearn results:
      Dataset name: breast_cancer
      Metric: accuracy
      Best validation score: 0.971831
      Number of target algorithm runs: 10
      Number of successful target algorithm runs: 9
      Number of crashed target algorithm runs: 0
      Number of target algorithms that exceeded the time limit: 1
      Number of target algorithms that exceeded the memory limit: 0

    Accuracy score 0.958041958041958




.. GENERATED FROM PYTHON SOURCE LINES 155-157

Use an iterative fit cross-validation with successive halving
=============================================================

.. GENERATED FROM PYTHON SOURCE LINES 157-188

.. code-block:: default


    X, y = sklearn.datasets.load_breast_cancer(return_X_y=True)
    X_train, X_test, y_train, y_test = \
        sklearn.model_selection.train_test_split(X, y, random_state=1, shuffle=True)

    automl = autosklearn.classification.AutoSklearnClassifier(
        time_left_for_this_task=40,
        per_run_time_limit=10,
        tmp_folder='/tmp/autosklearn_sh_example_tmp_cv_02',
        disable_evaluator_output=False,
        resampling_strategy='cv-iterative-fit',
        include={
            'classifier': [
                'extra_trees', 'gradient_boosting', 'random_forest',
                'sgd', 'passive_aggressive'
            ],
            'feature_preprocessor': ['no_preprocessing']
        },
        get_smac_object_callback=get_smac_object_callback('iterations'),
    )
    automl.fit(X_train, y_train, dataset_name='breast_cancer')

    # Print the final ensemble constructed by auto-sklearn.
    pprint(automl.show_models(), indent=4)
    automl.refit(X_train, y_train)
    predictions = automl.predict(X_test)
    # Print statistics about the auto-sklearn run such as number of
    # iterations, number of models failed with a time out.
    print(automl.sprint_statistics())
    print("Accuracy score", sklearn.metrics.accuracy_score(y_test, predictions))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/runner/work/auto-sklearn/auto-sklearn/autosklearn/metalearning/metalearning/meta_base.py:68: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
      self.metafeatures = self.metafeatures.append(metafeatures)
    /home/runner/work/auto-sklearn/auto-sklearn/autosklearn/metalearning/metalearning/meta_base.py:72: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
      self.algorithm_runs[metric].append(runs)
    /opt/hostedtoolcache/Python/3.8.12/x64/lib/python3.8/site-packages/smac/intensification/parallel_scheduling.py:153: UserWarning: SuccessiveHalving is executed with 1 workers only. Consider to use pynisher to use all available workers.
      warnings.warn(
    {   2: {   'balancing': Balancing(random_state=1),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb938067940>,
               'cost': 0.046948356807511755,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb93d5c7b20>,
               'ensemble_weight': 0.36,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb938067fa0>,
               'model_id': 2,
               'rank': 3,
               'sklearn_classifier': None},
        3: {   'balancing': Balancing(random_state=1),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb937d850d0>,
               'cost': 0.05164319248826292,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb93ae10af0>,
               'ensemble_weight': 0.14,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb937d85b80>,
               'model_id': 3,
               'rank': 5,
               'sklearn_classifier': None},
        4: {   'balancing': Balancing(random_state=1),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb93805abb0>,
               'cost': 0.11267605633802817,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb937375700>,
               'ensemble_weight': 0.04,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb93805a6d0>,
               'model_id': 4,
               'rank': 6,
               'sklearn_classifier': None},
        5: {   'balancing': Balancing(random_state=1),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb93eb8c250>,
               'cost': 0.035211267605633804,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb938115580>,
               'ensemble_weight': 0.06,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb93eb8c3a0>,
               'model_id': 5,
               'rank': 2,
               'sklearn_classifier': None},
        6: {   'balancing': Balancing(random_state=1),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb937375a60>,
               'cost': 0.04694835680751174,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb93eb8c430>,
               'ensemble_weight': 0.06,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb937375af0>,
               'model_id': 6,
               'rank': 4,
               'sklearn_classifier': None},
        7: {   'balancing': Balancing(random_state=1),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb935fd82b0>,
               'cost': 0.03286384976525822,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb93f2bc6d0>,
               'ensemble_weight': 0.34,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb93d5c7fd0>,
               'model_id': 7,
               'rank': 1,
               'sklearn_classifier': None}}
    auto-sklearn results:
      Dataset name: breast_cancer
      Metric: accuracy
      Best validation score: 0.967136
      Number of target algorithm runs: 6
      Number of successful target algorithm runs: 6
      Number of crashed target algorithm runs: 0
      Number of target algorithms that exceeded the time limit: 0
      Number of target algorithms that exceeded the memory limit: 0

    Accuracy score 0.972027972027972




.. GENERATED FROM PYTHON SOURCE LINES 189-191

Next, we see the use of subsampling as a budget in Auto-sklearn
===============================================================

.. GENERATED FROM PYTHON SOURCE LINES 191-218

.. code-block:: default


    X, y = sklearn.datasets.load_breast_cancer(return_X_y=True)
    X_train, X_test, y_train, y_test = \
        sklearn.model_selection.train_test_split(X, y, random_state=1, shuffle=True)

    automl = autosklearn.classification.AutoSklearnClassifier(
        time_left_for_this_task=40,
        per_run_time_limit=10,
        tmp_folder='/tmp/autosklearn_sh_example_tmp_03',
        disable_evaluator_output=False,
        # 'holdout' with 'train_size'=0.67 is the default argument setting
        # for AutoSklearnClassifier. It is explicitly specified in this example
        # for demonstrational purpose.
        resampling_strategy='holdout',
        resampling_strategy_arguments={'train_size': 0.67},
        get_smac_object_callback=get_smac_object_callback('subsample'),
    )
    automl.fit(X_train, y_train, dataset_name='breast_cancer')

    # Print the final ensemble constructed by auto-sklearn.
    pprint(automl.show_models(), indent=4)
    predictions = automl.predict(X_test)
    # Print statistics about the auto-sklearn run such as number of
    # iterations, number of models failed with a time out.
    print(automl.sprint_statistics())
    print("Accuracy score", sklearn.metrics.accuracy_score(y_test, predictions))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/runner/work/auto-sklearn/auto-sklearn/autosklearn/metalearning/metalearning/meta_base.py:68: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
      self.metafeatures = self.metafeatures.append(metafeatures)
    /home/runner/work/auto-sklearn/auto-sklearn/autosklearn/metalearning/metalearning/meta_base.py:72: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
      self.algorithm_runs[metric].append(runs)
    /opt/hostedtoolcache/Python/3.8.12/x64/lib/python3.8/site-packages/smac/intensification/parallel_scheduling.py:153: UserWarning: SuccessiveHalving is executed with 1 workers only. Consider to use pynisher to use all available workers.
      warnings.warn(
    {   2: {   'balancing': Balancing(random_state=1),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb93a852ee0>,
               'cost': 0.028368794326241176,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb937f6c280>,
               'ensemble_weight': 0.04,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb93a8527c0>,
               'model_id': 2,
               'rank': 3,
               'sklearn_classifier': RandomForestClassifier(max_features=5, n_estimators=512, n_jobs=1,
                           random_state=1, warm_start=True)},
        3: {   'balancing': Balancing(random_state=1),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb930cb2100>,
               'cost': 0.021276595744680882,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb93a70dc70>,
               'ensemble_weight': 0.26,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb930cb2d90>,
               'model_id': 3,
               'rank': 1,
               'sklearn_classifier': MLPClassifier(activation='tanh', alpha=0.0001363185819149026, beta_1=0.999,
                  beta_2=0.9, early_stopping=True,
                  hidden_layer_sizes=(115, 115, 115),
                  learning_rate_init=0.00018009776276177523, max_iter=32,
                  n_iter_no_change=32, random_state=1, verbose=0, warm_start=True)},
        4: {   'balancing': Balancing(random_state=1, strategy='weighting'),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb9371922b0>,
               'cost': 0.028368794326241176,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb93aafadc0>,
               'ensemble_weight': 0.02,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb9377e6760>,
               'model_id': 4,
               'rank': 4,
               'sklearn_classifier': MLPClassifier(activation='tanh', alpha=0.00021148999718383549, beta_1=0.999,
                  beta_2=0.9, hidden_layer_sizes=(113, 113, 113),
                  learning_rate_init=0.0007452270241186694, max_iter=32,
                  n_iter_no_change=32, random_state=1, validation_fraction=0.0,
                  verbose=0, warm_start=True)},
        5: {   'balancing': Balancing(random_state=1, strategy='weighting'),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb93bb269a0>,
               'cost': 0.03546099290780147,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb93b887250>,
               'ensemble_weight': 0.06,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb93ec00040>,
               'model_id': 5,
               'rank': 7,
               'sklearn_classifier': RandomForestClassifier(criterion='entropy', max_features=3, min_samples_leaf=2,
                           n_estimators=512, n_jobs=1, random_state=1,
                           warm_start=True)},
        6: {   'balancing': Balancing(random_state=1, strategy='weighting'),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb93a70dfd0>,
               'cost': 0.021276595744680882,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb937f6cdf0>,
               'ensemble_weight': 0.32,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb93b130490>,
               'model_id': 6,
               'rank': 2,
               'sklearn_classifier': MLPClassifier(alpha=0.0017940473175767063, beta_1=0.999, beta_2=0.9,
                  early_stopping=True, hidden_layer_sizes=(101, 101),
                  learning_rate_init=0.0004684917334431039, max_iter=32,
                  n_iter_no_change=32, random_state=1, verbose=0, warm_start=True)},
        7: {   'balancing': Balancing(random_state=1),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb93af7fb80>,
               'cost': 0.028368794326241176,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb93aaa4cd0>,
               'ensemble_weight': 0.02,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb93af7f580>,
               'model_id': 7,
               'rank': 5,
               'sklearn_classifier': ExtraTreesClassifier(max_features=34, min_samples_leaf=3, min_samples_split=11,
                         n_estimators=512, n_jobs=1, random_state=1,
                         warm_start=True)},
        8: {   'balancing': Balancing(random_state=1, strategy='weighting'),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb93a958f40>,
               'cost': 0.03546099290780147,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb936d11640>,
               'ensemble_weight': 0.0,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb93d2cd580>,
               'model_id': 8,
               'rank': 9,
               'sklearn_classifier': RandomForestClassifier(max_features=2, min_samples_leaf=2, n_estimators=512,
                           n_jobs=1, random_state=1, warm_start=True)},
        9: {   'balancing': Balancing(random_state=1, strategy='weighting'),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb93b10aeb0>,
               'cost': 0.07801418439716312,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb93b0c7940>,
               'ensemble_weight': 0.02,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb93a9584f0>,
               'model_id': 9,
               'rank': 10,
               'sklearn_classifier': ExtraTreesClassifier(max_features=6, min_samples_split=10, n_estimators=512,
                         n_jobs=1, random_state=1, warm_start=True)}}
    auto-sklearn results:
      Dataset name: breast_cancer
      Metric: accuracy
      Best validation score: 0.978723
      Number of target algorithm runs: 11
      Number of successful target algorithm runs: 11
      Number of crashed target algorithm runs: 0
      Number of target algorithms that exceeded the time limit: 0
      Number of target algorithms that exceeded the memory limit: 0

    Accuracy score 0.951048951048951




.. GENERATED FROM PYTHON SOURCE LINES 219-223

Mixed budget approach
=====================
Finally, there's a mixed budget type which uses iterations where possible and
subsamples otherwise

.. GENERATED FROM PYTHON SOURCE LINES 223-254

.. code-block:: default


    X, y = sklearn.datasets.load_breast_cancer(return_X_y=True)
    X_train, X_test, y_train, y_test = \
        sklearn.model_selection.train_test_split(X, y, random_state=1, shuffle=True)

    automl = autosklearn.classification.AutoSklearnClassifier(
        time_left_for_this_task=40,
        per_run_time_limit=10,
        tmp_folder='/tmp/autosklearn_sh_example_tmp_04',
        disable_evaluator_output=False,
        # 'holdout' with 'train_size'=0.67 is the default argument setting
        # for AutoSklearnClassifier. It is explicitly specified in this example
        # for demonstrational purpose.
        resampling_strategy='holdout',
        resampling_strategy_arguments={'train_size': 0.67},
        include={
            'classifier': [
                'extra_trees', 'gradient_boosting', 'random_forest', 'sgd'
            ]
        },
        get_smac_object_callback=get_smac_object_callback('mixed'),
    )
    automl.fit(X_train, y_train, dataset_name='breast_cancer')

    # Print the final ensemble constructed by auto-sklearn.
    pprint(automl.show_models(), indent=4)
    predictions = automl.predict(X_test)
    # Print statistics about the auto-sklearn run such as number of
    # iterations, number of models failed with a time out.
    print(automl.sprint_statistics())
    print("Accuracy score", sklearn.metrics.accuracy_score(y_test, predictions))




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/runner/work/auto-sklearn/auto-sklearn/autosklearn/metalearning/metalearning/meta_base.py:68: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
      self.metafeatures = self.metafeatures.append(metafeatures)
    /home/runner/work/auto-sklearn/auto-sklearn/autosklearn/metalearning/metalearning/meta_base.py:72: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
      self.algorithm_runs[metric].append(runs)
    /opt/hostedtoolcache/Python/3.8.12/x64/lib/python3.8/site-packages/smac/intensification/parallel_scheduling.py:153: UserWarning: SuccessiveHalving is executed with 1 workers only. Consider to use pynisher to use all available workers.
      warnings.warn(
    {   2: {   'balancing': Balancing(random_state=1),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb93abe74c0>,
               'cost': 0.021276595744680882,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb93d441d60>,
               'ensemble_weight': 0.1,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb93abe7a00>,
               'model_id': 2,
               'rank': 5,
               'sklearn_classifier': RandomForestClassifier(max_features=5, n_estimators=64, n_jobs=1,
                           random_state=1, warm_start=True)},
        4: {   'balancing': Balancing(random_state=1),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb93d4135b0>,
               'cost': 0.014184397163120588,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb9370b4520>,
               'ensemble_weight': 0.14,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb93d4132e0>,
               'model_id': 4,
               'rank': 4,
               'sklearn_classifier': ExtraTreesClassifier(max_features=34, min_samples_leaf=3, min_samples_split=11,
                         n_estimators=512, n_jobs=1, random_state=1,
                         warm_start=True)},
        6: {   'balancing': Balancing(random_state=1, strategy='weighting'),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb93b887c40>,
               'cost': 0.04255319148936165,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb93d42fee0>,
               'ensemble_weight': 0.06,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb93d441c10>,
               'model_id': 6,
               'rank': 11,
               'sklearn_classifier': ExtraTreesClassifier(max_features=9, min_samples_split=10, n_estimators=64,
                         n_jobs=1, random_state=1, warm_start=True)},
        9: {   'balancing': Balancing(random_state=1),
               'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb93ac1ca90>,
               'cost': 0.028368794326241176,
               'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb93ba61550>,
               'ensemble_weight': 0.04,
               'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb93ac1c1f0>,
               'model_id': 9,
               'rank': 8,
               'sklearn_classifier': HistGradientBoostingClassifier(early_stopping=True,
                                   l2_regularization=0.005326508887463406,
                                   learning_rate=0.060800813211425456, max_iter=64,
                                   max_leaf_nodes=6, min_samples_leaf=5,
                                   n_iter_no_change=5, random_state=1,
                                   validation_fraction=None, warm_start=True)},
        10: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb937faee50>,
                'cost': 0.028368794326241176,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb937431580>,
                'ensemble_weight': 0.02,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb937faec70>,
                'model_id': 10,
                'rank': 9,
                'sklearn_classifier': HistGradientBoostingClassifier(early_stopping=False,
                                   l2_regularization=1.0647401999412075e-10,
                                   learning_rate=0.08291320147381159, max_iter=64,
                                   max_leaf_nodes=39, n_iter_no_change=0,
                                   random_state=1, validation_fraction=None,
                                   warm_start=True)},
        11: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb93b5ba520>,
                'cost': 0.021276595744680882,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb93a77d850>,
                'ensemble_weight': 0.26,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb93a9905e0>,
                'model_id': 11,
                'rank': 6,
                'sklearn_classifier': HistGradientBoostingClassifier(early_stopping=True,
                                   l2_regularization=3.387912939529945e-10,
                                   learning_rate=0.30755227194768237, max_iter=64,
                                   max_leaf_nodes=60, min_samples_leaf=39,
                                   n_iter_no_change=18, random_state=1,
                                   validation_fraction=None, warm_start=True)},
        14: {   'balancing': Balancing(random_state=1, strategy='weighting'),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb93a70dcd0>,
                'cost': 0.028368794326241176,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb93ac09fa0>,
                'ensemble_weight': 0.02,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb93a70d490>,
                'model_id': 14,
                'rank': 10,
                'sklearn_classifier': ExtraTreesClassifier(criterion='entropy', max_features=448, min_samples_leaf=2,
                         min_samples_split=20, n_estimators=64, n_jobs=1,
                         random_state=1, warm_start=True)},
        15: {   'balancing': Balancing(random_state=1),
                'classifier': <autosklearn.pipeline.components.classification.ClassifierChoice object at 0x7fb93734cb50>,
                'cost': 0.021276595744680882,
                'data_preprocessor': <autosklearn.pipeline.components.data_preprocessing.DataPreprocessorChoice object at 0x7fb93e9ffb80>,
                'ensemble_weight': 0.02,
                'feature_preprocessor': <autosklearn.pipeline.components.feature_preprocessing.FeaturePreprocessorChoice object at 0x7fb93734c130>,
                'model_id': 15,
                'rank': 7,
                'sklearn_classifier': ExtraTreesClassifier(criterion='entropy', max_features=4, min_samples_leaf=2,
                         min_samples_split=15, n_estimators=64, n_jobs=1,
                         random_state=1, warm_start=True)}}
    auto-sklearn results:
      Dataset name: breast_cancer
      Metric: accuracy
      Best validation score: 0.985816
      Number of target algorithm runs: 18
      Number of successful target algorithm runs: 17
      Number of crashed target algorithm runs: 0
      Number of target algorithms that exceeded the time limit: 1
      Number of target algorithms that exceeded the memory limit: 0

    Accuracy score 0.951048951048951





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 3 minutes  7.091 seconds)


.. _sphx_glr_download_examples_60_search_example_successive_halving.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/automl/auto-sklearn/master?urlpath=lab/tree/notebooks/examples/60_search/example_successive_halving.ipynb
      :alt: Launch binder
      :width: 150 px


  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: example_successive_halving.py <example_successive_halving.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: example_successive_halving.ipynb <example_successive_halving.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
